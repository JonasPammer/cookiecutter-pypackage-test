---
name: Run Tox and generate Coverage Report
permissions: read-all
"on":
  workflow_dispatch:
    inputs:
      lint:
        description: "Lint"
        required: true
        default: true
        type: boolean
  pull_request:
  push:
    branches:
      - master
    paths:
      - ".github/workflows/ci.yml"
      - "tests/**"
      - ".gitattributes"
      - ".yamllint"
      - "pyproject.toml"
      - "requirements-dev.txt"
      - "tox.ini"
      # as per .dockerignore:
      - "setup.cfg"
      - "setup.py"
      - "LICENSE"
      - "test_application/**"
  schedule:
    # At 05:00 on Sunday.
    - cron: "0 5 * * 0"

# Cancel running jobs when a pull request is updated
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.sha }}
  cancel-in-progress: true

jobs:
  ci:
    name: ${{ matrix.os }} / CPython ${{ matrix.python-version }} / ${{ matrix.pip-version }} pip
    runs-on: ${{ matrix.os }}-latest
    permissions:
      pull-requests: write
    strategy:
      fail-fast: false
      matrix:
        os:
          - Ubuntu
          - Windows
          - macOS
        python-version:
          - "3.7"
          - "3.8"
          - "3.9"
          - "3.10"
        pip-version:
          - "latest"
          - "previous"
        include:
          - os: Ubuntu
            python-version: 3.11-dev
            pip-version: latest
          - os: Ubuntu
            python-version: 3.7
            pip-version: main
    env:
      PY_COLORS: 1
      TOXENV: pip${{ matrix.pip-version }}
      TOX_PARALLEL_NO_SPINNER: 1
    steps:
      - name: check out the codebase
        uses: actions/checkout@v3

      - name: set up python ${{ matrix.python-version }} using github action
        uses: actions/setup-python@v3 using GitHub Action
        if: "!endsWith(matrix.python-version, '-dev')"
        with:
          python-version: ${{ matrix.python-version }}

      - name: set up Python ${{ matrix.python-version }} using deadsnakes action
        if: endsWith(matrix.python-version, '-dev')
        uses: deadsnakes/action@v2.0.1
        with:
          python-version: ${{ matrix.python-version }}

      - name: log python version info (${{ matrix.python-version }})
        run: python --version --version
      
      - name: get pip cache dir
        id: pip-cache
        run: |
          echo "::set-output name=dir::$(pip cache dir)"
      
      - name: setup/activate pip cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.pip-cache.outputs.dir }}
          key: >-
            ${{ runner.os }}-pip-${{ hashFiles('setup.*') }}-${{
            hashFiles('requirements*.txt') }}-${{ hashFiles('tox.ini') }}-${{
            hashFiles('.pre-commit-config.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            ${{ runner.os }}-

      - name: setup/activate pre-commit cache
        uses: actions/cache@v3
        with:
          path: ~/.cache/pre-commit
          key: ${{ hashFiles('.pre-commit-config.yaml') }}

      - name: setup/activate project-venv cache
        uses: actions/cache@v3
        with:
          path: project-venv
          key: ${{ hashFiles('requirements-dev.txt') }}

      - name: install dependencies
        run: |
          python3 -m venv project-venv
          source project-venv/bin/activate
          pip3 install -r requirements-dev.txt
          pip3 install -r requirements.txt

      # tox automatically pip installs local directory
      - name: Run tox.
        run: |
          source project-venv/bin/activate
          tox

      - name: generate coverage xml
        run: .tox/py3/bin/coverage xml -o coverage.xml

      - name: Upload coverage to Codecov and add Pull Request comment
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          name: ${{ runner.os }}-${{ matrix.python-version }}-${{ matrix.pip-version }}
